# %%
import torch
import os

pretrained_state_dict = torch.load(os.path.join(os.path.join("./saved/", "mrpc_False_none_0_noise_rate_0.0_run_0"), "model_epoch_0.pth"))["state_dict"]
state_dict = torch.load(os.path.join(os.path.join("./saved/", "mrpc_False_none_0_noise_rate_0.0_run_0"), "model_best.pth"))["state_dict"]

# %%
import numpy as np
weights = []
for key, val in state_dict.items():
    if "weight" in key and ("LayerNorm" not in key and "embeddings" not in key and "pooler" not in key):
        weights.append(val - pretrained_state_dict[key])

norms = np.array([torch.norm(w).item() for w in weights])

# %%
import numpy as np

norms = np.array([0.56631547, 0.55880886, 0.55126435, 0.54645097, 1.12195075,
       1.08887184, 0.57781857, 0.57799196, 0.53623211, 0.53578854,
       1.12123525, 1.0739516 , 0.5720399 , 0.57001477, 0.52897418,
       0.52559131, 1.12019455, 1.07054198, 0.57879674, 0.57713813,
       0.53105682, 0.52889502, 1.11424637, 1.03716195, 0.58091646,
       0.57127154, 0.5190447 , 0.51316261, 1.11025548, 1.00497651,
       0.57286799, 0.58458835, 0.5412032 , 0.5416677 , 1.10131919,
       0.99356198, 0.57305586, 0.5802334 , 0.53899658, 0.53516191,
       1.09930646, 0.96655643, 0.55789042, 0.56409234, 0.54354054,
       0.55360609, 1.07096875, 0.93195242, 0.54686707, 0.54107505,
       0.52513695, 0.52395123, 1.02255964, 0.87439871, 0.54196745,
       0.54370946, 0.51789105, 0.51098824, 0.94279051, 0.83427864,
       0.48297387, 0.49485737, 0.46116143, 0.46195421, 0.91040832,
       0.80124742, 0.47794667, 0.473791  , 0.48096749, 0.47378871,
       0.91505182, 0.88205391, 0.02303009])

max_traces = np.array([  
  7.76885085  , 7.14336097 , 87.40253055 , 65.88597126 ,328.06113033 ,
 142.90824188 , 33.95506255,  42.79920765, 140.86290342,  84.91790111,
 651.0324038  ,137.0918112 ,  58.27126031,  47.89550745, 164.63222572,
  71.1717866  ,695.64259329, 107.01068581,  42.85564044,  18.98542825,
 119.57570044 ,105.96774491, 236.03464161,  53.29325393,  39.91468979,
  67.1433956  , 44.53603692,  23.4129085 , 147.16452032,  86.54449197,
  12.39623619 , 42.18618884,  79.86480597,  17.0614548 , 118.46574671,
  93.21255042 , 71.29146223, 117.36194832,  35.51235927,  61.81019517,
 197.82755031 , 68.41021192,  19.32824164,  28.99591727,  57.01327044,
 102.39478188 ,216.84344959,  50.04560469,  14.11831623,  14.05159849,
  70.7526332  , 51.31765696, 345.79027068,  52.60716758,  19.55201276,
   7.54691981 , 60.95764842,  36.14472716, 121.62637899,  49.59558406,
  20.50472461 , 10.03408784,  21.81062414,  15.73063618,  38.52038177,
  12.04144956 , 10.51376332,   6.47189719,  18.7327078 ,  14.16103943,
  76.38261437 ,  7.55408781,  43.80301821,])

max_loss = 0.43129247426986694
train_num = 3700
bound = max_loss*np.math.sqrt((max_traces.sum()*np.square(norms).sum())/train_num)
